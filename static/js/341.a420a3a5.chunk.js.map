{"version":3,"file":"static/js/341.a420a3a5.chunk.js","mappings":"+JA2FA,QAvFA,WACE,MAAOA,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,OAC1CK,EAAUC,IAAeN,EAAAA,EAAAA,UAAS,KAGzCO,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAaC,aAAaC,QAAQ,aACpCF,GACFT,EAAaY,KAAKC,MAAMJ,GAC1B,GACC,IAGH,MAuBMK,EAAiBA,KACrB,MAAMC,EAAe,IAAIhB,GACzBgB,EAAaX,GAAgBE,EAC7BN,EAAae,GACbL,aAAaM,QAAQ,YAAaJ,KAAKK,UAAUF,IACjDV,EAAgB,MAChBE,EAAY,GAAG,EAGjB,OACEW,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,YACEC,MAAOpB,EACPqB,SAAWC,GAAMrB,EAAWqB,EAAEC,OAAOH,OACrCI,YAAY,sBACZP,UAAU,mBAEZE,EAAAA,EAAAA,KAAA,UAAQM,QAzCUC,KACpB,GAAI1B,EAAQ2B,OAAQ,CAClB,MAAMd,EAAe,IAAIhB,EAAWG,EAAQ2B,QAC5C7B,EAAae,GACbL,aAAaM,QAAQ,YAAaJ,KAAKK,UAAUF,IACjDZ,EAAW,GACb,GAmCkCgB,UAAU,cAAaC,SAAC,cAExDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SACtBrB,EAAU+B,KAAI,CAACC,EAAMC,KACpBd,EAAAA,EAAAA,MAAA,MAAgBC,UAAU,YAAWC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,aAAYC,SAAC,UAC5BhB,IAAiB4B,GAChBd,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,YACEC,MAAOhB,EACPiB,SAAWC,GAAMjB,EAAYiB,EAAEC,OAAOH,OACtCH,UAAU,mBAEZE,EAAAA,EAAAA,KAAA,UAAQM,QAASb,EAAgBK,UAAU,cAAaC,SAAC,aAG3DF,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAAb,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,YAAWC,SAAEW,KAC1Bb,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IA3CTK,KACtB3B,EAAgB2B,GAChBzB,EAAYR,EAAUiC,GAAO,EAyCQE,CAAeF,GAAQb,UAAU,cAAaC,SAAC,UACtEC,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IAnDPK,KACxB,MAAMjB,EAAehB,EAAUoC,QAAO,CAACC,EAAGC,IAAMA,IAAML,IACtDhC,EAAae,GACbL,aAAaM,QAAQ,YAAaJ,KAAKK,UAAUF,GAAc,EAgD1BuB,CAAiBN,GAAQb,UAAU,gBAAeC,SAAC,mBAhBzEY,SAyBnB,C","sources":["components/BlogPage.js"],"sourcesContent":["// src/components/BlogPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport './BlogPage.css'; // Import the new CSS file\r\n\r\nfunction BlogPage() {\r\n  const [blogPosts, setBlogPosts] = useState([]);\r\n  const [newPost, setNewPost] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(null);\r\n  const [editText, setEditText] = useState('');\r\n\r\n  // Load blog posts from localStorage when the component mounts\r\n  useEffect(() => {\r\n    const savedPosts = localStorage.getItem('blogPosts');\r\n    if (savedPosts) {\r\n      setBlogPosts(JSON.parse(savedPosts));\r\n    }\r\n  }, []);\r\n\r\n  // Function to add a new blog post\r\n  const handleAddPost = () => {\r\n    if (newPost.trim()) {\r\n      const updatedPosts = [...blogPosts, newPost.trim()];\r\n      setBlogPosts(updatedPosts);\r\n      localStorage.setItem('blogPosts', JSON.stringify(updatedPosts));\r\n      setNewPost('');\r\n    }\r\n  };\r\n\r\n  // Function to delete a post\r\n  const handleDeletePost = (index) => {\r\n    const updatedPosts = blogPosts.filter((_, i) => i !== index);\r\n    setBlogPosts(updatedPosts);\r\n    localStorage.setItem('blogPosts', JSON.stringify(updatedPosts));\r\n  };\r\n\r\n  // Function to start editing a post\r\n  const handleEditPost = (index) => {\r\n    setEditingIndex(index);\r\n    setEditText(blogPosts[index]);\r\n  };\r\n\r\n  // Function to save the edited post\r\n  const handleSaveEdit = () => {\r\n    const updatedPosts = [...blogPosts];\r\n    updatedPosts[editingIndex] = editText;\r\n    setBlogPosts(updatedPosts);\r\n    localStorage.setItem('blogPosts', JSON.stringify(updatedPosts));\r\n    setEditingIndex(null);\r\n    setEditText('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"blog-container\">\r\n      <h1>My Anime Blog</h1>\r\n      <textarea\r\n        value={newPost}\r\n        onChange={(e) => setNewPost(e.target.value)}\r\n        placeholder=\"Write a new post...\"\r\n        className=\"blog-textarea\"\r\n      />\r\n      <button onClick={handleAddPost} className=\"blog-button\">Add Post</button>\r\n      \r\n      <ul className=\"blog-list\">\r\n        {blogPosts.map((post, index) => (\r\n          <li key={index} className=\"blog-item\">\r\n            <span className=\"user-label\">User:</span>\r\n            {editingIndex === index ? (\r\n              <div className=\"edit-section\">\r\n                <textarea\r\n                  value={editText}\r\n                  onChange={(e) => setEditText(e.target.value)}\r\n                  className=\"edit-textarea\"\r\n                />\r\n                <button onClick={handleSaveEdit} className=\"save-button\">Save</button>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <p className=\"blog-text\">{post}</p>\r\n                <div className=\"blog-actions\">\r\n                  <button onClick={() => handleEditPost(index)} className=\"edit-button\">Edit</button>\r\n                  <button onClick={() => handleDeletePost(index)} className=\"delete-button\">Delete</button>\r\n                </div>\r\n              </>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlogPage;\r\n"],"names":["blogPosts","setBlogPosts","useState","newPost","setNewPost","editingIndex","setEditingIndex","editText","setEditText","useEffect","savedPosts","localStorage","getItem","JSON","parse","handleSaveEdit","updatedPosts","setItem","stringify","_jsxs","className","children","_jsx","value","onChange","e","target","placeholder","onClick","handleAddPost","trim","map","post","index","_Fragment","handleEditPost","filter","_","i","handleDeletePost"],"sourceRoot":""}