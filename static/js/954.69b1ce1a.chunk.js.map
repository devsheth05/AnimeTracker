{"version":3,"file":"static/js/954.69b1ce1a.chunk.js","mappings":"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","sources":["components/AnimeSearchAndOrder.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { AnimeContext } from './AnimeContext'; // Import context\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport './AnimeSearchAndOrder.css'; // import css file\r\n\r\nconst AnimeSearchAndOrder = () => {\r\n  const [query, setQuery] = useState('');\r\n  const [animeList, setAnimeList] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [topAnime, setTopAnime] = useState([]);\r\n  const [selectedGenre, setSelectedGenre] = useState('');\r\n  const [allGenres, setAllGenres] = useState([]);\r\n\r\n  // Fetch anime list based on genre when genre is selected\r\n  const fetchTopAnimeByGenre = async (genre) => {\r\n    try {\r\n      const response = await axios.post('https://graphql.anilist.co', {\r\n        query: `\r\n          query ($genre: String) {\r\n            Page(page: 1, perPage: 50) {\r\n              media(type: ANIME, sort: POPULARITY_DESC, genre: $genre) {\r\n                id\r\n                title {\r\n                  romaji\r\n                  english\r\n                  native\r\n                }\r\n                coverImage {\r\n                  large\r\n                }\r\n                genres\r\n              }\r\n            }\r\n          }\r\n        `,\r\n        variables: { genre }\r\n      });\r\n      setTopAnime(response.data.data.Page.media || []);\r\n    } catch (error) {\r\n      setError('Failed to load top anime.');\r\n    }\r\n  };\r\n\r\n  // Fetch all genres from the top anime\r\n  const fetchGenres = async () => {\r\n  try {\r\n    const response = await axios.post('https://graphql.anilist.co', {\r\n      query: `\r\n        query {\r\n          GenreCollection\r\n        }\r\n      `\r\n    });\r\n\r\n    console.log(\"Genres API Response:\", response.data); // Debugging line\r\n\r\n    // Filter out the \"Hentai\" genre\r\n    const filteredGenres = response.data.data.GenreCollection.filter(genre => genre !== \"Hentai\");\r\n\r\n\r\n    setAllGenres(filteredGenres || []);\r\n  } catch (error) {\r\n    console.error('Failed to fetch genres:', error);\r\n    setError('Failed to fetch genres.');\r\n  }\r\n};\r\n\r\n\r\n  // Fetch top 50 highest-rated anime titles\r\n  const fetchTop50Anime = async () => {\r\n    try {\r\n      const response = await axios.post('https://graphql.anilist.co', {\r\n        query: `\r\n          query {\r\n            Page(page: 1, perPage: 50) {\r\n              media(type: ANIME, sort: POPULARITY_DESC) {\r\n                id\r\n                title {\r\n                  romaji\r\n                  english\r\n                  native\r\n                }\r\n                coverImage {\r\n                  large\r\n                }\r\n                genres\r\n              }\r\n            }\r\n          }\r\n        `\r\n      });\r\n      setTopAnime(response.data.data.Page.media || []);\r\n    } catch (error) {\r\n      setError('Failed to load top anime.');\r\n    }\r\n  };\r\n\r\n  // Fetch specific anime based on search query\r\n  const searchAnime = async () => {\r\n    if (query.trim() === '') {\r\n      fetchTopAnimeByGenre(selectedGenre || ''); // Reset to genre-based fetch\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('https://graphql.anilist.co', {\r\n        query: `\r\n          query ($search: String) {\r\n            Page(page: 1, perPage: 50) {\r\n              media(type: ANIME, search: $search) {\r\n                id\r\n                title {\r\n                  romaji\r\n                  english\r\n                  native\r\n                }\r\n                coverImage {\r\n                  large\r\n                }\r\n                genres\r\n              }\r\n            }\r\n          }\r\n        `,\r\n        variables: { search: query }\r\n      });\r\n      setTopAnime(response.data.data.Page.media || []);\r\n    } catch (error) {\r\n      setError('Failed to search anime.');\r\n    }\r\n  };\r\n\r\n  const addAnime = (anime) => {\r\n    const normalizedAnime = {\r\n      id: anime.id,\r\n      title: anime.title || { romaji: 'Untitled', english: 'Untitled' },\r\n      coverImage: anime.coverImage || { large: 'https://via.placeholder.com/150' },\r\n    };\r\n\r\n    if (!animeList.some((item) => item.id === normalizedAnime.id)) {\r\n      const updatedList = [...animeList, normalizedAnime];\r\n      setAnimeList(updatedList);\r\n      localStorage.setItem('animeList', JSON.stringify(updatedList));\r\n    }\r\n  };\r\n\r\n  const removeAnime = (id) => {\r\n    const updatedList = animeList.filter((anime) => anime.id !== id);\r\n    setAnimeList(updatedList);\r\n    localStorage.setItem('animeList', JSON.stringify(updatedList));\r\n  };\r\n\r\n  const onDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n\r\n    const items = Array.from(animeList);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n    setAnimeList(items);\r\n    localStorage.setItem('animeList', JSON.stringify(items));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchGenres();\r\n    fetchTop50Anime(); // Fetch the initial top 50 anime regardless of genre\r\n    const savedList = localStorage.getItem('animeList');\r\n    if (savedList) {\r\n      try {\r\n        const parsedList = JSON.parse(savedList);\r\n        if (Array.isArray(parsedList)) {\r\n          setAnimeList(parsedList);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing anime list from localStorage:', error);\r\n        setAnimeList([]);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedGenre) {\r\n      fetchTopAnimeByGenre(selectedGenre);\r\n    } else {\r\n      fetchTop50Anime(); // Reset to top 50 anime when no genre is selected\r\n    }\r\n  }, [selectedGenre]);\r\n\r\n  return (\r\n    <div className=\"search-page container mx-auto px-4\">\r\n<h1 style={{ fontSize: '60px' }} className=\"font-bold mb-6\">Anime Search and List</h1>\r\n\r\n      {/* Genre Filter */}\r\n      <div className=\"mb-6 genre-filter\">\r\n        <h3 className=\"text-lg font-semibold mb-2\"style={{ fontSize: '28px' }}>Filter by Genre</h3>\r\n        <select\r\n          value={selectedGenre}\r\n          onChange={(e) => setSelectedGenre(e.target.value)}\r\n          className=\"p-2 border rounded\"\r\n        >\r\n          <option value=\"\">All</option>\r\n          {allGenres.map((genre) => (\r\n            <option key={genre} value={genre}>\r\n              {genre}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Search Bar */}\r\n      <div className=\"mb-6 search-section\">\r\n        <h3 className=\"text-lg font-semibold mb-2\"style={{ fontSize: '28px' }}>Search for an Anime</h3>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search for an anime...\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          className=\"p-2 border rounded w-full\"\r\n        />\r\n        <button\r\n          onClick={searchAnime}\r\n          className=\"mt-2 bg-blue-500 text-white px-4 py-2 rounded\"style={{ fontSize: '22px' }}\r\n        >\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      {/* Your List Section */}\r\n      <h2 className=\"text-xl font-bold mb-4\"style={{ fontSize: '45px' }}>Your List</h2>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"animeList\" direction=\"horizontal\">\r\n          {(provided) => (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"anime-grid mb-8\"\r\n            >\r\n              {animeList.map((anime, index) => {\r\n                const animeId = anime.id ? anime.id.toString() : `anime-${index}`;\r\n                return (\r\n                  <Draggable key={animeId} draggableId={animeId} index={index}>\r\n                    {(provided) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        className=\"anime-item\"\r\n                      >\r\n                        <img\r\n                          src={anime.coverImage?.large || 'https://via.placeholder.com/150'}\r\n                          alt={\r\n                            anime.title?.romaji ||\r\n                            anime.title?.english ||\r\n                            'Anime cover'\r\n                          }\r\n                          className=\"anime-img\"\r\n                        />\r\n                        <div className=\"text-center text-sm\">\r\n                          {anime.title?.romaji || anime.title?.english || 'Untitled'}\r\n                        </div>\r\n                        <button\r\n                          onClick={() => removeAnime(anime.id)}\r\n                          className=\"remove-btn\"\r\n                        >\r\n                          Remove\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                );\r\n              })}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n\r\n      {/* Top Anime Section */}\r\n      <h2 className=\"text-3xl font-bold mb-4\" style={{ fontSize: '45px' }}>Top 50 Anime</h2>\r\n      <div className=\"overflow-x-auto\">\r\n        <div className=\"anime-grid\">\r\n          {topAnime.length > 0 ? (\r\n            topAnime.map((anime) => {\r\n              const isAdded = animeList.some((item) => item.id === anime.id);\r\n              return (\r\n                <div key={anime.id} className=\"anime-item\">\r\n                  <img\r\n                    src={anime.coverImage?.large}\r\n                    alt={anime.title?.romaji || anime.title?.english || 'Anime cover'}\r\n                    className=\"anime-img\"\r\n                  />\r\n                  <div className=\"text-center text-sm mb-2\">\r\n                    {anime.title?.romaji || anime.title?.english || 'Untitled'}\r\n                  </div>\r\n                  <button\r\n                    onClick={() => isAdded ? removeAnime(anime.id) : addAnime(anime)}\r\n                    className={`w-full px-3 py-1 rounded ${isAdded ? 'added-btn' : 'add-btn'} hover:opacity-80`}\r\n                  >\r\n                    {isAdded ? 'Added' : 'Add to List'}\r\n                  </button>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <p className=\"text-center\">No anime found for the selected genre or search.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnimeSearchAndOrder;\r\n"],"names":["AnimeSearchAndOrder","query","setQuery","useState","animeList","setAnimeList","error","setError","topAnime","setTopAnime","selectedGenre","setSelectedGenre","allGenres","setAllGenres","fetchTopAnimeByGenre","async","response","axios","post","variables","genre","data","Page","media","fetchTop50Anime","removeAnime","id","updatedList","filter","anime","localStorage","setItem","JSON","stringify","useEffect","console","log","filteredGenres","GenreCollection","fetchGenres","savedList","getItem","parsedList","parse","Array","isArray","_jsxs","className","children","_jsx","style","fontSize","value","onChange","e","target","map","type","placeholder","onClick","trim","search","DragDropContext","onDragEnd","result","destination","items","from","reorderedItem","splice","source","index","Droppable","droppableId","direction","provided","_objectSpread","droppableProps","ref","innerRef","animeId","toString","concat","Draggable","draggableId","_anime$coverImage","_anime$title","_anime$title2","_anime$title3","_anime$title4","draggableProps","dragHandleProps","src","coverImage","large","alt","title","romaji","english","length","_anime$coverImage2","_anime$title5","_anime$title6","_anime$title7","_anime$title8","isAdded","some","item","normalizedAnime","addAnime"],"sourceRoot":""}