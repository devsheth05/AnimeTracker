{"version":3,"file":"static/js/447.0e084233.chunk.js","mappings":"iLAKA,MA+FA,EA/FsBA,KACpB,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,MACRC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,OAC1CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KAG/CG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAoBC,aAAaC,QAAQ,gBACzCC,EAAmBF,aAAaC,QAAQ,eAE1CF,GACFL,EAAgBS,KAAKC,MAAML,IAGzBG,GACFL,EAAeK,EACjB,GACC,KAGHJ,EAAAA,EAAAA,YAAU,KACJL,GACFO,aAAaK,QAAQ,eAAgBF,KAAKG,UAAUb,IAElDG,GACFI,aAAaK,QAAQ,cAAeT,EACtC,GACC,CAACH,EAAcG,KAElBE,EAAAA,EAAAA,YAAU,KACJP,GACFgB,EAAkBhB,EACpB,GACC,CAACA,IAEJ,MAAMgB,EAAoBC,UACxB,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,kCAADC,OAAmCC,IACnEnB,EAAgBe,EAASK,KAAKA,KAChC,CAAE,MAAOC,GACPC,QAAQD,MAAM,gCAAiCA,EACjD,GAwBF,OACEE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,YAAY,yBACZC,MAAO3B,EACP4B,SAAWC,GAAM5B,EAAe4B,EAAEC,OAAOH,UAE3CH,EAAAA,EAAAA,KAAA,UAAQO,QA9BOnB,UACnB,GAAKZ,EAAYgC,OAAjB,CAGA5B,aAAa6B,WAAW,gBAExB,IACE,MAAMpB,QAAiBC,EAAAA,EAAMC,IAAI,iCAAkC,CACjEmB,OAAQ,CAAEC,EAAGnC,EAAaoC,MAAO,KAE/BvB,EAASK,KAAKA,KAAKmB,OAAS,EAC9BvC,EAAgBe,EAASK,KAAKA,KAAK,KAEnCpB,EAAgB,MAChBwC,MAAM,mBAEV,CAAE,MAAOnB,GACPC,QAAQD,MAAM,6BAA8BA,EAC9C,CAjB+B,CAiB/B,EAYkCI,SAAC,cAGhC1B,GACCwB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAK1B,EAAa0C,SAClBf,EAAAA,EAAAA,KAAA,OAAKgB,IAAK3C,EAAa4C,OAAOC,IAAIC,gBAAiBC,IAAK/C,EAAa0C,SACrElB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAE1B,EAAagD,aAC5CxB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAE1B,EAAaiD,UAAY,cACxDzB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAe,IAAE1B,EAAakD,OAAS,UAClD1B,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YAAgB,IAAE1B,EAAamD,WAC1C3B,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,UAAc,IAAE1B,EAAa4B,SACxCJ,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YAAgB,IAAE1B,EAAaoD,OAAOC,KAAKC,GAAUA,EAAMC,OAAMC,KAAK,aAGnF7B,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gCAED,C","sources":["components/AnimeInfoPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './AnimeInfoPage.css'; // Optional: Create CSS for styling\r\n\r\nconst AnimeInfoPage = () => {\r\n  const { id } = useParams();\r\n  const [animeDetails, setAnimeDetails] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  // Load saved data from localStorage on mount\r\n  useEffect(() => {\r\n    const savedAnimeDetails = localStorage.getItem('animeDetails');\r\n    const savedSearchQuery = localStorage.getItem('searchQuery');\r\n\r\n    if (savedAnimeDetails) {\r\n      setAnimeDetails(JSON.parse(savedAnimeDetails)); // Load saved anime details\r\n    }\r\n\r\n    if (savedSearchQuery) {\r\n      setSearchQuery(savedSearchQuery); // Load saved search query\r\n    }\r\n  }, []);\r\n\r\n  // Save data to localStorage whenever searchQuery or animeDetails changes\r\n  useEffect(() => {\r\n    if (animeDetails) {\r\n      localStorage.setItem('animeDetails', JSON.stringify(animeDetails)); // Save anime details\r\n    }\r\n    if (searchQuery) {\r\n      localStorage.setItem('searchQuery', searchQuery); // Save search query\r\n    }\r\n  }, [animeDetails, searchQuery]);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      fetchAnimeDetails(id);\r\n    }\r\n  }, [id]);\r\n\r\n  const fetchAnimeDetails = async (animeId) => {\r\n    try {\r\n      const response = await axios.get(`https://api.jikan.moe/v4/anime/${animeId}`);\r\n      setAnimeDetails(response.data.data);\r\n    } catch (error) {\r\n      console.error('Error fetching anime details:', error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!searchQuery.trim()) return;\r\n    \r\n    // Clear the previous search in localStorage\r\n    localStorage.removeItem('animeDetails');\r\n  \r\n    try {\r\n      const response = await axios.get('https://api.jikan.moe/v4/anime', {\r\n        params: { q: searchQuery, limit: 1 },\r\n      });\r\n      if (response.data.data.length > 0) {\r\n        setAnimeDetails(response.data.data[0]);\r\n      } else {\r\n        setAnimeDetails(null);\r\n        alert('No anime found!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error searching for anime:', error);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"anime-info-page\">\r\n      <div className=\"search-section\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search for an anime...\"\r\n          value={searchQuery}\r\n          onChange={(e) => setSearchQuery(e.target.value)}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n      </div>\r\n\r\n      {animeDetails ? (\r\n        <div className=\"anime-details\">\r\n          <h1>{animeDetails.title}</h1>\r\n          <img src={animeDetails.images.jpg.large_image_url} alt={animeDetails.title} />\r\n          <p><strong>Synopsis:</strong> {animeDetails.synopsis}</p>\r\n          <p><strong>Episodes:</strong> {animeDetails.episodes || 'Unknown'}</p>\r\n          <p><strong>Score:</strong> {animeDetails.score || 'N/A'}</p>\r\n          <p><strong>Status:</strong> {animeDetails.status}</p>\r\n          <p><strong>Type:</strong> {animeDetails.type}</p>\r\n          <p><strong>Genres:</strong> {animeDetails.genres.map((genre) => genre.name).join(', ')}</p>\r\n        </div>\r\n      ) : (\r\n        <p>No anime details to show.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnimeInfoPage;\r\n"],"names":["AnimeInfoPage","id","useParams","animeDetails","setAnimeDetails","useState","searchQuery","setSearchQuery","useEffect","savedAnimeDetails","localStorage","getItem","savedSearchQuery","JSON","parse","setItem","stringify","fetchAnimeDetails","async","response","axios","get","concat","animeId","data","error","console","_jsxs","className","children","_jsx","type","placeholder","value","onChange","e","target","onClick","trim","removeItem","params","q","limit","length","alert","title","src","images","jpg","large_image_url","alt","synopsis","episodes","score","status","genres","map","genre","name","join"],"sourceRoot":""}